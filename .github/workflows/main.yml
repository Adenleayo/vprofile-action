name: vprofile Actions
on: [push,workflow_dispatch]
env:
  AWS_REGION: us-east-1
  ECR_REPO: vprofileappimg
  EKS_CLUSTER: vprofile-eks
  

jobs: 
  Testing:
    runs-on:  ubuntu-latest
    steps: 
      - name: code checkout
        uses: actions/checkout@v4

      - name: Maven tests
        run: mvn test 
        
      - name: checkstyle tests
        run: mvn checkstyle:checkstyle

      - name: use java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

         # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
              -Dsonar.host.url=${{ secrets.SONAR_URL }}
              -Dsonar.login=${{ secrets.SONAR_TOKEN }}
              -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
              -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
              -Dsonar.sources=src/
              -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
              -Dsonar.junit.reportsPath=target/surefire-reports/
              -Dsonar.jacoco.reportsPath=target/jacoco.exec
              -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

              
        # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }} 

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on:  ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4
      
      
      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPO }}
          region: ${{ env.AWS_REGION }}
          tag: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./  
  DeployEks:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps: 
      - name: code checkout
        uses: actions/checkout@v4
        
      - name: AWS EKS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name    : print kubeconfig file
        run    : cat ~/.kube/config

      - name: login to ECR
        run: kubaectl create secret docker-registry regcred --docker-server={{ secret.REGISTERY}} --docker-username=AWS --docker-password=$(aws ecr get-login-password)
      
      - name: Deploy helm  
        uses: ccapell/action-deploy-eks-helm@v1.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS__KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: mycluster
          #config-files: .github/values/dev.yaml
          chart-path: chart/
          namespace: dev
          values: appimage=${{ secrets.appimage }}/${{ secrets.apptag }}latest,${{ github.run_number }}
          name: vprofile-stack 
                     